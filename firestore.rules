rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // TEMPORARY: Allow all reads and writes for debugging
    // TODO: Replace with proper security rules after testing
    match /{document=**} {
      allow read, write: if true;
    }
    
    // Users collection - allow authenticated users to read all users and create/update their own profile
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Friendships collection - allow authenticated users to read friendships they're part of
    match /friendships/{friendshipId} {
      allow read: if request.auth != null 
        && (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id);
      allow create: if request.auth != null 
        && (request.auth.uid == request.resource.data.user1Id || request.auth.uid == request.resource.data.user2Id);
      allow delete: if request.auth != null 
        && (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id);
    }
    
    // Friend requests collection - allow users to read requests involving them and create requests from themselves
    match /friendRequests/{requestId} {
      allow read: if request.auth != null 
        && (request.auth.uid == resource.data.fromUserId 
            || request.auth.uid == resource.data.toUserId 
            || request.auth.token.email == resource.data.toUserEmail);
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.fromUserId;
      allow update: if request.auth != null 
        && (request.auth.uid == resource.data.toUserId 
            || request.auth.token.email == resource.data.toUserEmail);
    }
    
    // Comments collection - allow authenticated users to read all comments
    // and create comments with their own user info
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
  }
}
